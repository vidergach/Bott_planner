package org.example;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class MessageHandlerTests {
    private MessageHandler messageHandler;

    @BeforeEach
    void setUp() {
        messageHandler = new MessageHandler();
    }

    @Test
    void testAddTask() {
        String result = messageHandler.processUserInput("/add –ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã", "user123");
        assertEquals("–ó–∞–¥–∞—á–∞ \"–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã\" –¥–æ–±–∞–≤–ª–µ–Ω–∞!", result);
    }

    @Test
    void testAddEmptyTask() {
        String result = messageHandler.processUserInput("/add", "user123");
        assertTrue(result.contains("–∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á—É"));
    }

    @Test
    void testAddExistingTask() {
        messageHandler.processUserInput("/add –ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã", "user123");
        String result = messageHandler.processUserInput("/add –ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã", "user123");
        assertEquals("–ó–∞–¥–∞—á–∞ \"–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã\" —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!", result);
    }

    @Test
    void testShowEmptyTasks() {
        String result = messageHandler.processUserInput("/tasks", "user123");
        assertEquals("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!", result);
    }

    @Test
    void testShowTasks() {
        messageHandler.processUserInput("/add –ó–∞–¥–∞—á–∞ 1", "user123");
        messageHandler.processUserInput("/add –ó–∞–¥–∞—á–∞ 2", "user123");

        String result = messageHandler.processUserInput("/tasks", "user123");
        assertTrue(result.contains("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á"));
        assertTrue(result.contains("–ó–∞–¥–∞—á–∞ 1"));
        assertTrue(result.contains("–ó–∞–¥–∞—á–∞ 2"));
    }
    @Test
    void testDeleteTask() {
        messageHandler.processUserInput("/add –£–¥–∞–ª—è–µ–º–∞—è –∑–∞–¥–∞—á–∞", "user123");
        String result = messageHandler.processUserInput("/delete –£–¥–∞–ª—è–µ–º–∞—è –∑–∞–¥–∞—á–∞", "user123");
        assertTrue(result.contains("üóëÔ∏è –ó–∞–¥–∞—á–∞ \"–£–¥–∞–ª—è–µ–º–∞—è –∑–∞–¥–∞—á–∞\" —É–¥–∞–ª–µ–Ω–∞"));
    }
}